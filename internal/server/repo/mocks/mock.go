// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	models "grpc-practice/internal/server/models"
	repo "grpc-practice/internal/server/repo"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProducter is a mock of Producter interface.
type MockProducter struct {
	ctrl     *gomock.Controller
	recorder *MockProducterMockRecorder
}

// MockProducterMockRecorder is the mock recorder for MockProducter.
type MockProducterMockRecorder struct {
	mock *MockProducter
}

// NewMockProducter creates a new mock instance.
func NewMockProducter(ctrl *gomock.Controller) *MockProducter {
	mock := &MockProducter{ctrl: ctrl}
	mock.recorder = &MockProducterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducter) EXPECT() *MockProducterMockRecorder {
	return m.recorder
}

// CreateItem mocks base method.
func (m *MockProducter) CreateItem(item models.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockProducterMockRecorder) CreateItem(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockProducter)(nil).CreateItem), item)
}

// GetItemByName mocks base method.
func (m *MockProducter) GetItemByName(name string) (*models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemByName", name)
	ret0, _ := ret[0].(*models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemByName indicates an expected call of GetItemByName.
func (mr *MockProducterMockRecorder) GetItemByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemByName", reflect.TypeOf((*MockProducter)(nil).GetItemByName), name)
}

// GetItemsWithSort mocks base method.
func (m *MockProducter) GetItemsWithSort(params repo.ListParams) ([]models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsWithSort", params)
	ret0, _ := ret[0].([]models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsWithSort indicates an expected call of GetItemsWithSort.
func (mr *MockProducterMockRecorder) GetItemsWithSort(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsWithSort", reflect.TypeOf((*MockProducter)(nil).GetItemsWithSort), params)
}

// UpdateItems mocks base method.
func (m *MockProducter) UpdateItems(items []models.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItems", items)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItems indicates an expected call of UpdateItems.
func (mr *MockProducterMockRecorder) UpdateItems(items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItems", reflect.TypeOf((*MockProducter)(nil).UpdateItems), items)
}

// UpdatePriceByName mocks base method.
func (m *MockProducter) UpdatePriceByName(item models.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePriceByName", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePriceByName indicates an expected call of UpdatePriceByName.
func (mr *MockProducterMockRecorder) UpdatePriceByName(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePriceByName", reflect.TypeOf((*MockProducter)(nil).UpdatePriceByName), item)
}
