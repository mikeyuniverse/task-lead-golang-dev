// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package mock_server is a generated GoMock package.
package mock_server

import (
	context "context"
	repo "grpc-practice/internal/server/repo"
	transport "grpc-practice/pkg/proto/transport"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockservicer is a mock of servicer interface.
type Mockservicer struct {
	ctrl     *gomock.Controller
	recorder *MockservicerMockRecorder
}

// MockservicerMockRecorder is the mock recorder for Mockservicer.
type MockservicerMockRecorder struct {
	mock *Mockservicer
}

// NewMockservicer creates a new mock instance.
func NewMockservicer(ctrl *gomock.Controller) *Mockservicer {
	mock := &Mockservicer{ctrl: ctrl}
	mock.recorder = &MockservicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockservicer) EXPECT() *MockservicerMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *Mockservicer) Fetch(url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fetch indicates an expected call of Fetch.
func (mr *MockservicerMockRecorder) Fetch(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*Mockservicer)(nil).Fetch), url)
}

// List mocks base method.
func (m *Mockservicer) List(context context.Context, params repo.ListParams) ([]*transport.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", context, params)
	ret0, _ := ret[0].([]*transport.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockservicerMockRecorder) List(context, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*Mockservicer)(nil).List), context, params)
}
